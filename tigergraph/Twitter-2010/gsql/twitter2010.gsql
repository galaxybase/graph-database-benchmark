# load Twitter2010数据
drop all
Create Vertex Person(primary_id id UINT, id UINT)
Create Directed Edge Friend(from Person, to Person)
Create Graph social(Person, Friend)
use graph social
begin
create loading job load_twitter2010 for graph social {
  define filename file1="/home/tigergraph/data/twitter-2010/vertex.csv";
  define filename file2="/home/tigergraph/data/twitter-2010/edge.csv";

  load file1 to Vertex Person values($0, $0) using header="false", separator=",";
  load file2 to Edge Friend values($0, $1) using header="false", separator="	";
}
end
run loading job load_twitter2010

# 创建LPA算法查询
CREATE OR REPLACE QUERY Label_Prop(INT maxIter) FOR GRAPH social {
# Partition the vertices into communities, according to the Label Propagation method.
# Indicate community membership by assigning each vertex a community ID.

        OrAccum @@changed = true;
        MapAccum<int, int> @map;     # <communityId, numNeighbors>
        MapAccum<int, int> @@commSizes;   # <communityId, members>
        SumAccum<int> @label, @num;
        Start = {ANY};

# Assign unique labels to each vertex
        Start = SELECT s FROM Start:s ACCUM s.@label = getvid(s);

# Propagate labels to neighbors until labels converge or the max iterations is reached
        WHILE @@changed == true LIMIT maxIter DO
                @@changed = false;
                Start = SELECT s
                        FROM Start:s -(:e)-> :t
                        ACCUM t.@map += (s.@label -> 1)  # count the occurrences of neighbor's labels
                        POST-ACCUM
                                INT maxV = 0,
                                INT label = 0,
                                # Iterate over the map to get the neighbor label that occurs most often
                                FOREACH (k,v) IN t.@map DO
                                        CASE WHEN v > maxV THEN
                                                maxV = v,
                                                label = k
                                        END
                                END,
                                # When the neighbor search finds a label AND it is a new label
                                # AND the label's count has increased, update the label.
                                CASE WHEN label != 0 AND t.@label != label AND maxV > t.@num THEN
                                        @@changed += true,
                                        t.@label = label,
                                        t.@num = maxV
                                END,
                                t.@map.clear();
        END;

        Start = {ANY};

        Start = SELECT s FROM Start:s
                POST-ACCUM @@commSizes += (s.@label -> 1);
        PRINT @@commSizes;

}

# 创建PageRank算法查询
CREATE OR REPLACE QUERY PageRank (FLOAT maxChange, INT maxIter, FLOAT damping, BOOL display, INT outputLimit) FOR GRAPH social{
# Compute the pageRank score for each vertex in the GRAPH
# In each iteration, compute a score for each vertex:
#   score = (1-damping) + damping*sum(received scores FROM its neighbors).
# The pageRank algorithm stops when either of the following is true:
#  a) it reaches maxIter iterations;
#  b) the max score change for any vertex compared to the last iteration <= maxChange.

        TYPEDEF TUPLE<vertex Vertex_ID, FLOAT score> vertexScore;
        HeapAccum<vertexScore>(outputLimit, score DESC) @@topScores;
        MaxAccum<float> @@maxDiff = 9999; # max score change in an iteration
        SumAccum<float> @received_score = 0; # sum of scores each vertex receives FROM neighbors
        SumAccum<float> @score = 1;   # Initial score for every vertex is 1.
        SetAccum<EDGE> @@edgeSet;                   # list of all edges, if display is needed

        Start = {Person.*};   #  Start with all vertices of specified type(s)
        WHILE @@maxDiff > maxChange LIMIT maxIter DO
                @@maxDiff = 0;
                V = SELECT s
                    FROM Start:s -(:e)-> :t
                    ACCUM t.@received_score += s.@score/(s.outdegree("Friend"))
                    POST-ACCUM s.@score = (1.0-damping) + damping * s.@received_score,
                               s.@received_score = 0,
                               @@maxDiff += abs(s.@score - s.@score');
        END; # END WHILE loop


        IF outputLimit > 0 THEN
                V = SELECT s FROM Start:s
                    POST-ACCUM @@topScores += vertexScore(s, s.@score);
        END;


        IF display THEN
                Start = SELECT s
                        FROM Start:s -(:e)-> :t
                        ACCUM @@edgeSet += e;

                Start = SELECT s
                        FROM Start:s
                        LIMIT 10;
                PRINT Start[Start.@score];
        END;

    PRINT @@edgeSet.size();

}

# 创建WCC算法查询
CREATE OR REPLACE QUERY WCC() for graph social {
    SumAccum<int>    @@group_cnt = 0;
      int    loop_count = 0;
      MinAccum<int>    @cc_id;

      OrAccum<bool> @changed_group= false;

      Start = {Person.*};
      @@group_cnt = Start.size();
      Start = select x from Start:x accum x.@cc_id = getvid(x);

      while (Start.size()>0) do
         Start= select y from Start:x - (Friend:e)-> :y
              where x.@cc_id < y.@cc_id
         accum y.@cc_id += x.@cc_id
         post-accum if (y.@changed_group ==false) then
            @@group_cnt += -1, y.@changed_group+=true
         end;

         loop_count = loop_count + 1;
      end;
      Print @@group_cnt, loop_count;
}

# 安装创建的查询
INSTALL QUERY -DISTRIBUTED Label_Prop
INSTALL QUERY -DISTRIBUTED PageRank
INSTALL QUERY -DISTRIBUTED WCC

# 创建K-Neighbor查询
CREATE OR REPLACE QUERY kNeighbor(VERTEX<Person> S, INT depth) for graph social{

    OrAccum          @visited = false;
    SumAccum<int>    @@loop=0;
	SumAccum<int> @@count = 0;

    Start = {S};
    Start = SELECT v
            FROM Start:v
            ACCUM v.@visited = true;

    WHILE (@@loop < depth) DO
        Start = SELECT v
                FROM Start:u - (:e)->:v
                WHERE v.@visited != true
                POST-ACCUM v.@visited = true;
        @@count += Start.size();
        @@loop += 1;
   END;

   PRINT @@count as vertexCount;

}

INSTALL QUERY kNeighbor

# 创建最短路径查询
CREATE OR REPLACE QUERY Shortest_OUT (VERTEX<Person> S, VERTEX<Person> T , INT maxDepth) FOR GRAPH social {
  OrAccum @@stop = false;       // global variable controlling whether to continue the search
  OrAccum  @seenS = false;      // a vertex has been seen by S
  OrAccum  @seenT = false;      // a vertex has been seen by T
  SumAccum<int>   @length = 0;  // vertex runtime attribute: # steps from origin vertex S

  Start = {S,T};

  //initialize S, T vertices
  StartSet (ANY) = SELECT v         // _ means StartSet can contain any vertex type
             FROM Start:v
             ACCUM CASE WHEN v==S THEN v.@seenS=true
                        WHEN v==T THEN v.@seenT=true
                   END;
  WHILE @@stop == false LIMIT maxDepth DO
    StartSet  = SELECT v
        // Consider each edge from S or T's frontier (u) to outside (v),
        // i.e., each edge that moves "out" from the frontier.
        // Note how StartSet is updated to be v (pushing the frontier forward).
        FROM StartSet:u-(:e)->:v
        WHERE u.@seenS==true   // from T frontier to outside
        ACCUM
            // If u->v joins the S and T frontiers, an odd-length path is found (Case III)
            CASE WHEN v.@seenT == true
                THEN @@stop += true,
                    // we don't want to print the results twice
                    // v.@pathResults  stores all shortest paths
                    // between S and T where v is in the middle of
                    // every such path.
                    // only need to print out the result once, see above step 3 (b)
                    v.@length =  u.@length + 1
            // Else, since u->v does not complete a path, move the frontiers forward.
            // If u is in S's frontier, then extend S's frontier to v. Assign path info to v.
            WHEN v.@seenT != true
                THEN v.@seenS = true,
                    v.@length = u.@length + 1
            END;
  END;

  // print out the final result stored at the vertex who marked
  // as meet vertex
  StartSet = SELECT v
             FROM StartSet:v
             WHERE v.@seenT == true;

  #PRINT StartSet.@resultLength, StartSet.@pathResults;           # JSON Output v1
  PRINT StartSet [StartSet.@length as length]; # JSON Output v2
}

INSTALL QUERY -DISTRIBUTED Shortest_OUT